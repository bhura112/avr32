
GccBoardProject1.elf:     file format elf32-avr32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .reset        00002004  80000000  80000000  00000400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rela.got     00000000  80002004  80002004  00002404  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000001b0  80002004  80002004  00002404  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .exception    00000200  80002200  80002200  00002600  2**9
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       00000090  80002400  80002400  00002800  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .balign       00000004  00000004  80002490  00002c04  2**0
                  ALLOC
  6 .bss          000000a8  00000008  80002490  00002c08  2**2
                  ALLOC
  7 .comment      00000030  00000000  00000000  00002890  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000238  00000000  00000000  000028c0  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_pubnames 000004a2  00000000  00000000  00002af8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00003b66  00000000  00000000  00002f9a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00000a5a  00000000  00000000  00006b00  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00002bc0  00000000  00000000  0000755a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  0000037c  00000000  00000000  0000a11c  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000012d1  00000000  00000000  0000a498  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    000006ca  00000000  00000000  0000b769  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macinfo 0044664b  00000000  00000000  0000be33  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .stack        00001000  00003000  00003000  00000400  2**0
                  ALLOC
 18 .debug_ranges 000001e0  00000000  00000000  00452480  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .reset:

80000000 <_trampoline>:

  .global _trampoline
  .type _trampoline, @function
_trampoline:
  // Jump to program start.
  rjmp    program_start
80000000:	e0 8f 10 00 	bral	80002000 <program_start>
	...

80002000 <program_start>:

  .org  PROGRAM_START_OFFSET
program_start:
  // Jump to the C runtime startup routine.
  lda.w   pc, _stext
80002000:	fe cf fe d8 	sub	pc,pc,-296

Disassembly of section .text:

80002004 <gpio_configure_pin>:
80002004:	f8 08 16 05 	lsr	r8,r12,0x5
 * \param pin The pin number.
 * \param flags The configuration.
 */
void gpio_configure_pin(uint32_t pin, uint32_t flags)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80002008:	a9 68       	lsl	r8,0x8
8000200a:	e0 28 f0 00 	sub	r8,61440
	} else {
		gpio_port->pderc = 1 << (pin & 0x1F);
	}

#endif
	if (flags & GPIO_PULL_UP) {
8000200e:	16 99       	mov	r9,r11
80002010:	e2 19 00 04 	andl	r9,0x4,COH
80002014:	c0 70       	breq	80002022 <gpio_configure_pin+0x1e>
		gpio_port->puers = 1 << (pin & 0x1F);
80002016:	30 19       	mov	r9,1
80002018:	f2 0c 09 49 	lsl	r9,r9,r12
8000201c:	f1 49 00 74 	st.w	r8[116],r9
80002020:	c0 68       	rjmp	8000202c <gpio_configure_pin+0x28>
	} else {
		gpio_port->puerc = 1 << (pin & 0x1F);
80002022:	30 19       	mov	r9,1
80002024:	f2 0c 09 49 	lsl	r9,r9,r12
80002028:	f1 49 00 78 	st.w	r8[120],r9
	}

#endif

	/* Select interrupt level for group */
	if (flags & GPIO_INTERRUPT) {
8000202c:	16 99       	mov	r9,r11
8000202e:	e2 19 00 80 	andl	r9,0x80,COH
80002032:	c2 40       	breq	8000207a <gpio_configure_pin+0x76>
		if (flags & GPIO_BOTHEDGES) {
80002034:	16 99       	mov	r9,r11
80002036:	e2 19 01 80 	andl	r9,0x180,COH
8000203a:	c0 90       	breq	8000204c <gpio_configure_pin+0x48>
			gpio_port->imr0c = 1 << (pin & 0x1F);
8000203c:	30 19       	mov	r9,1
8000203e:	f2 0c 09 49 	lsl	r9,r9,r12
80002042:	f1 49 00 a8 	st.w	r8[168],r9
			gpio_port->imr1c = 1 << (pin & 0x1F);
80002046:	f1 49 00 b8 	st.w	r8[184],r9
8000204a:	c1 88       	rjmp	8000207a <gpio_configure_pin+0x76>
		} else if (flags & GPIO_RISING) {
8000204c:	16 99       	mov	r9,r11
8000204e:	e2 19 02 80 	andl	r9,0x280,COH
80002052:	c0 90       	breq	80002064 <gpio_configure_pin+0x60>
			gpio_port->imr0s = 1 << (pin & 0x1F);
80002054:	30 19       	mov	r9,1
80002056:	f2 0c 09 49 	lsl	r9,r9,r12
8000205a:	f1 49 00 a4 	st.w	r8[164],r9
			gpio_port->imr1c = 1 << (pin & 0x1F);
8000205e:	f1 49 00 b8 	st.w	r8[184],r9
80002062:	c0 c8       	rjmp	8000207a <gpio_configure_pin+0x76>
		} else if (flags & GPIO_FALLING) {
80002064:	16 99       	mov	r9,r11
80002066:	e2 19 03 80 	andl	r9,0x380,COH
8000206a:	c0 80       	breq	8000207a <gpio_configure_pin+0x76>
			gpio_port->imr0c = 1 << (pin & 0x1F);
8000206c:	30 19       	mov	r9,1
8000206e:	f2 0c 09 49 	lsl	r9,r9,r12
80002072:	f1 49 00 a8 	st.w	r8[168],r9
			gpio_port->imr1s = 1 << (pin & 0x1F);
80002076:	f1 49 00 b4 	st.w	r8[180],r9
		}
	}

	/* Select direction and initial pin state */
	if (flags & GPIO_DIR_OUTPUT) {
8000207a:	f3 db c0 01 	bfextu	r9,r11,0x0,0x1
8000207e:	c1 50       	breq	800020a8 <gpio_configure_pin+0xa4>
		if (flags & GPIO_INIT_HIGH) {
80002080:	e2 1b 00 02 	andl	r11,0x2,COH
80002084:	c0 70       	breq	80002092 <gpio_configure_pin+0x8e>
			gpio_port->ovrs = 1 << (pin & 0x1F);
80002086:	30 19       	mov	r9,1
80002088:	f2 0c 09 49 	lsl	r9,r9,r12
8000208c:	f1 49 00 54 	st.w	r8[84],r9
80002090:	c0 68       	rjmp	8000209c <gpio_configure_pin+0x98>
		} else {
			gpio_port->ovrc = 1 << (pin & 0x1F);
80002092:	30 19       	mov	r9,1
80002094:	f2 0c 09 49 	lsl	r9,r9,r12
80002098:	f1 49 00 58 	st.w	r8[88],r9
		}

		gpio_port->oders = 1 << (pin & 0x1F);
8000209c:	30 19       	mov	r9,1
8000209e:	f2 0c 09 49 	lsl	r9,r9,r12
800020a2:	f1 49 00 44 	st.w	r8[68],r9
800020a6:	c0 68       	rjmp	800020b2 <gpio_configure_pin+0xae>
	} else {
		gpio_port->oderc = 1 << (pin & 0x1F);
800020a8:	30 19       	mov	r9,1
800020aa:	f2 0c 09 49 	lsl	r9,r9,r12
800020ae:	f1 49 00 48 	st.w	r8[72],r9
	}

	/* Enable GPIO */
	gpio_port->gpers = 1 << (pin & 0x1F);
800020b2:	30 19       	mov	r9,1
800020b4:	f2 0c 09 4c 	lsl	r12,r9,r12
800020b8:	91 1c       	st.w	r8[0x4],r12
}
800020ba:	5e fc       	retal	r12

800020bc <gpio_set_pin_high>:
 *
 * \note The function \ref gpio_configure_pin must be called before.
 */
void gpio_set_pin_high(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
800020bc:	f8 08 16 05 	lsr	r8,r12,0x5
800020c0:	a9 68       	lsl	r8,0x8
800020c2:	e0 28 f0 00 	sub	r8,61440
	
	/* Value to be driven on the I/O line: 1. */
	gpio_port->ovrs  = 1 << (pin & 0x1F);
800020c6:	30 19       	mov	r9,1
800020c8:	f2 0c 09 4c 	lsl	r12,r9,r12
800020cc:	f1 4c 00 54 	st.w	r8[84],r12
}
800020d0:	5e fc       	retal	r12

800020d2 <gpio_clr_gpio_pin>:
 *
 * \param pin The pin number.
 */
void gpio_clr_gpio_pin(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
800020d2:	f8 08 16 05 	lsr	r8,r12,0x5
800020d6:	a9 68       	lsl	r8,0x8
800020d8:	e0 28 f0 00 	sub	r8,61440
	
	/* Value to be driven on the I/O line: 0. */
	gpio_port->ovrc  = 1 << (pin & 0x1F);
800020dc:	30 19       	mov	r9,1
800020de:	f2 0c 09 4c 	lsl	r12,r9,r12
800020e2:	f1 4c 00 58 	st.w	r8[88],r12
	/* The GPIO output driver is enabled for that pin. */
	gpio_port->oders = 1 << (pin & 0x1F);
800020e6:	f1 4c 00 44 	st.w	r8[68],r12
	/* The GPIO module controls that pin. */
	gpio_port->gpers = 1 << (pin & 0x1F);
800020ea:	91 1c       	st.w	r8[0x4],r12
}
800020ec:	5e fc       	retal	r12

800020ee <sysclk_init>:

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = true;
#endif
}
800020ee:	5e fc       	retal	r12

800020f0 <_get_interrupt_handler>:
__int_handler _get_interrupt_handler(uint32_t int_level)
{
	/* ICR3 is mapped first, ICR0 last.
	Code in exception.S puts int_level in R12 which is used by the compiler
	to pass a single argument to a function. */
	uint32_t int_grp = AVR32_INTC.icr[AVR32_INTC_INT3 - int_level];
800020f0:	fe 78 08 00 	mov	r8,-63488
800020f4:	e0 69 00 83 	mov	r9,131
800020f8:	f2 0c 01 0c 	sub	r12,r9,r12
800020fc:	f0 0c 03 29 	ld.w	r9,r8[r12<<0x2]
	uint32_t int_req = AVR32_INTC.irr[int_grp];
80002100:	f2 ca ff c0 	sub	r10,r9,-64
80002104:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
80002108:	58 08       	cp.w	r8,0
8000210a:	c0 21       	brne	8000210e <_get_interrupt_handler+0x1e>
8000210c:	5e fd       	retal	0
		? _int_handler_table[int_grp]._int_line_handler_table[32
			- clz(int_req) - 1]
8000210e:	f0 08 12 00 	clz	r8,r8
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
		? _int_handler_table[int_grp]._int_line_handler_table[32
80002112:	48 5a       	lddpc	r10,80002124 <_get_interrupt_handler+0x34>
80002114:	f4 09 00 39 	add	r9,r10,r9<<0x3
80002118:	f0 08 11 1f 	rsub	r8,r8,31
8000211c:	72 19       	ld.w	r9,r9[0x4]
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
8000211e:	f2 08 03 2c 	ld.w	r12,r9[r8<<0x2]
		? _int_handler_table[int_grp]._int_line_handler_table[32
			- clz(int_req) - 1]
		: NULL;
}
80002122:	5e fc       	retal	r12
80002124:	80 00       	ld.sh	r0,r0[0x0]
80002126:	24 00       	sub	r0,64

80002128 <_stext>:

  .global _stext
  .type _stext, @function
_stext:
  // Set initial stack pointer.
  lda.w   sp, _estack
80002128:	e0 6d 40 00 	mov	sp,16384

  // Set up EVBA so interrupts can be enabled.
  lda.w   r0, _evba
  mtsr    AVR32_EVBA, r0
8000212c:	fe c0 ff 2c 	sub	r0,pc,-212

  // Enable the exception processing.
  csrf    AVR32_SR_EM_OFFSET
80002130:	e3 b0 00 01 	mtsr	0x4,r0

  // Load initialized data having a global lifetime from the data LMA.
  lda.w   r0, _data
  lda.w   r1, _edata
80002134:	d5 53       	csrf	0x15
  cp      r0, r1
80002136:	30 40       	mov	r0,4
  brhs    idata_load_loop_end
80002138:	30 81       	mov	r1,8
  lda.w   r2, _data_lma
8000213a:	02 30       	cp.w	r0,r1
idata_load_loop:
  ld.d    r4, r2++
8000213c:	c0 72       	brcc	8000214a <idata_load_loop_end>
  st.d    r0++, r4
8000213e:	fe c2 fc ae 	sub	r2,pc,-850

80002142 <idata_load_loop>:
  cp      r0, r1
  brlo    idata_load_loop
80002142:	a5 05       	ld.d	r4,r2++
idata_load_loop_end:

  // Clear uninitialized data having a global lifetime in the blank static storage section.
  lda.w   r0, __bss_start
80002144:	a1 24       	st.d	r0++,r4
  lda.w   r1, _end
80002146:	02 30       	cp.w	r0,r1
  cp      r0, r1
80002148:	cf d3       	brcs	80002142 <idata_load_loop>

8000214a <idata_load_loop_end>:
  brhs    udata_clear_loop_end
8000214a:	30 80       	mov	r0,8
  mov     r2, 0
8000214c:	e0 61 00 b0 	mov	r1,176
  mov     r3, 0
udata_clear_loop:
  st.d    r0++, r2
80002150:	02 30       	cp.w	r0,r1
  cp      r0, r1
80002152:	c0 62       	brcc	8000215e <udata_clear_loop_end>
  brlo    udata_clear_loop
80002154:	30 02       	mov	r2,0
  // Safety: Set the default "return" @ to the exit routine address.
  lda.w   lr, exit
#endif

  // Start the show.
  lda.w   pc, main
80002156:	30 03       	mov	r3,0

80002158 <udata_clear_loop>:
80002158:	a1 22       	st.d	r0++,r2
8000215a:	02 30       	cp.w	r0,r1
8000215c:	cf e3       	brcs	80002158 <udata_clear_loop>

8000215e <udata_clear_loop_end>:
8000215e:	fe cf ff f6 	sub	pc,pc,-10
80002162:	d7 03       	nop

80002164 <board_init>:
80002164:	5e fc       	retal	r12

80002166 <u32Delay>:
80002166:	5e fc       	retal	r12

80002168 <main>:
80002168:	eb cd 40 c0 	pushm	r6-r7,lr
8000216c:	f0 1f 00 0c 	mcall	8000219c <main+0x34>
80002170:	f0 1f 00 0c 	mcall	800021a0 <main+0x38>
80002174:	31 1b       	mov	r11,17
80002176:	32 0c       	mov	r12,32
{
	
	sysclk_init();
	board_init();
	
	gpio_configure_pin(AVR32_PIN_PB00,GPIO_DIR_OUTPUT|GPIO_DRIVE_LOW);
80002178:	f0 1f 00 0b 	mcall	800021a4 <main+0x3c>
	
	while (1)
	{
				gpio_set_pin_high(AVR32_PIN_PB00);
8000217c:	32 06       	mov	r6,32
				u32Delay(100);
8000217e:	36 47       	mov	r7,100
	
	gpio_configure_pin(AVR32_PIN_PB00,GPIO_DIR_OUTPUT|GPIO_DRIVE_LOW);
	
	while (1)
	{
				gpio_set_pin_high(AVR32_PIN_PB00);
80002180:	0c 9c       	mov	r12,r6
80002182:	f0 1f 00 0a 	mcall	800021a8 <main+0x40>
				u32Delay(100);
80002186:	0e 9c       	mov	r12,r7
80002188:	f0 1f 00 09 	mcall	800021ac <main+0x44>
				gpio_clr_gpio_pin(AVR32_PIN_PB00);
8000218c:	0c 9c       	mov	r12,r6
8000218e:	f0 1f 00 09 	mcall	800021b0 <main+0x48>
				u32Delay(100);
80002192:	0e 9c       	mov	r12,r7
80002194:	f0 1f 00 06 	mcall	800021ac <main+0x44>
80002198:	cf 4b       	rjmp	80002180 <main+0x18>
8000219a:	00 00       	add	r0,r0
8000219c:	80 00       	ld.sh	r0,r0[0x0]
8000219e:	20 ee       	sub	lr,14
800021a0:	80 00       	ld.sh	r0,r0[0x0]
800021a2:	21 64       	sub	r4,22
800021a4:	80 00       	ld.sh	r0,r0[0x0]
800021a6:	20 04       	sub	r4,0
800021a8:	80 00       	ld.sh	r0,r0[0x0]
800021aa:	20 bc       	sub	r12,11
800021ac:	80 00       	ld.sh	r0,r0[0x0]
800021ae:	21 66       	sub	r6,22
800021b0:	80 00       	ld.sh	r0,r0[0x0]
800021b2:	20 d2       	sub	r2,13

Disassembly of section .exception:

80002200 <_evba>:
_evba:

	.org  0x000
	// Unrecoverable Exception.
_handle_Unrecoverable_Exception:
	rjmp $
80002200:	c0 08       	rjmp	80002200 <_evba>
	...

80002204 <_handle_TLB_Multiple_Hit>:

	.org  0x004
	// TLB Multiple Hit.
_handle_TLB_Multiple_Hit:
	rjmp $
80002204:	c0 08       	rjmp	80002204 <_handle_TLB_Multiple_Hit>
	...

80002208 <_handle_Bus_Error_Data_Fetch>:

	.org  0x008
	// Bus Error Data Fetch.
_handle_Bus_Error_Data_Fetch:
	rjmp $
80002208:	c0 08       	rjmp	80002208 <_handle_Bus_Error_Data_Fetch>
	...

8000220c <_handle_Bus_Error_Instruction_Fetch>:

	.org  0x00C
	// Bus Error Instruction Fetch.
_handle_Bus_Error_Instruction_Fetch:
	rjmp $
8000220c:	c0 08       	rjmp	8000220c <_handle_Bus_Error_Instruction_Fetch>
	...

80002210 <_handle_NMI>:

	.org  0x010
	// NMI.
_handle_NMI:
	rjmp $
80002210:	c0 08       	rjmp	80002210 <_handle_NMI>
	...

80002214 <_handle_Instruction_Address>:

	.org  0x014
	// Instruction Address.
_handle_Instruction_Address:
	rjmp $
80002214:	c0 08       	rjmp	80002214 <_handle_Instruction_Address>
	...

80002218 <_handle_ITLB_Protection>:

	.org  0x018
	// ITLB Protection.
_handle_ITLB_Protection:
	rjmp $
80002218:	c0 08       	rjmp	80002218 <_handle_ITLB_Protection>
	...

8000221c <_handle_Breakpoint>:

	.org  0x01C
	// Breakpoint.
_handle_Breakpoint:
	rjmp $
8000221c:	c0 08       	rjmp	8000221c <_handle_Breakpoint>
	...

80002220 <_handle_Illegal_Opcode>:

	.org  0x020
	// Illegal Opcode.
_handle_Illegal_Opcode:
	rjmp $
80002220:	c0 08       	rjmp	80002220 <_handle_Illegal_Opcode>
	...

80002224 <_handle_Unimplemented_Instruction>:

	.org  0x024
	// Unimplemented Instruction.
_handle_Unimplemented_Instruction:
	rjmp $
80002224:	c0 08       	rjmp	80002224 <_handle_Unimplemented_Instruction>
	...

80002228 <_handle_Privilege_Violation>:

	.org  0x028
	// Privilege Violation.
_handle_Privilege_Violation:
	rjmp $
80002228:	c0 08       	rjmp	80002228 <_handle_Privilege_Violation>
	...

8000222c <_handle_Floating_Point>:

	.org  0x02C
	// Floating-Point: UNUSED IN AVR32UC and AVR32AP.
_handle_Floating_Point:
	rjmp $
8000222c:	c0 08       	rjmp	8000222c <_handle_Floating_Point>
	...

80002230 <_handle_Coprocessor_Absent>:

	.org  0x030
	// Coprocessor Absent: UNUSED IN AVR32UC.
_handle_Coprocessor_Absent:
	rjmp $
80002230:	c0 08       	rjmp	80002230 <_handle_Coprocessor_Absent>
	...

80002234 <_handle_Data_Address_Read>:

	.org  0x034
	// Data Address (Read).
_handle_Data_Address_Read:
	rjmp $
80002234:	c0 08       	rjmp	80002234 <_handle_Data_Address_Read>
	...

80002238 <_handle_Data_Address_Write>:

	.org  0x038
	// Data Address (Write).
_handle_Data_Address_Write:
	rjmp $
80002238:	c0 08       	rjmp	80002238 <_handle_Data_Address_Write>
	...

8000223c <_handle_DTLB_Protection_Read>:

	.org  0x03C
	// DTLB Protection (Read).
_handle_DTLB_Protection_Read:
	rjmp $
8000223c:	c0 08       	rjmp	8000223c <_handle_DTLB_Protection_Read>
	...

80002240 <_handle_DTLB_Protection_Write>:

	.org  0x040
	// DTLB Protection (Write).
_handle_DTLB_Protection_Write:
	rjmp $
80002240:	c0 08       	rjmp	80002240 <_handle_DTLB_Protection_Write>
	...

80002244 <_handle_DTLB_Modified>:

	.org  0x044
	// DTLB Modified: UNUSED IN AVR32UC.
_handle_DTLB_Modified:
	rjmp $
80002244:	c0 08       	rjmp	80002244 <_handle_DTLB_Modified>
	...

80002250 <_handle_ITLB_Miss>:

	.org  0x050
	// ITLB Miss.
_handle_ITLB_Miss:
	rjmp $
80002250:	c0 08       	rjmp	80002250 <_handle_ITLB_Miss>
	...

80002260 <_handle_DTLB_Miss_Read>:

	.org  0x060
	// DTLB Miss (Read).
_handle_DTLB_Miss_Read:
	rjmp $
80002260:	c0 08       	rjmp	80002260 <_handle_DTLB_Miss_Read>
	...

80002270 <_handle_DTLB_Miss_Write>:

	.org  0x070
	// DTLB Miss (Write).
_handle_DTLB_Miss_Write:
	rjmp $
80002270:	c0 08       	rjmp	80002270 <_handle_DTLB_Miss_Write>
	...

80002300 <_handle_Supervisor_Call>:

	.org  0x100
	// Supervisor Call.
_handle_Supervisor_Call:
	rjmp $
80002300:	c0 08       	rjmp	80002300 <_handle_Supervisor_Call>
80002302:	d7 03       	nop

80002304 <_int0>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
80002304:	30 0c       	mov	r12,0
80002306:	cf 5e       	rcall	800020f0 <_get_interrupt_handler>
80002308:	58 0c       	cp.w	r12,0
8000230a:	f8 0f 17 10 	movne	pc,r12
8000230e:	d6 03       	rete

80002310 <_int1>:
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
80002310:	30 1c       	mov	r12,1
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
80002312:	ce fe       	rcall	800020f0 <_get_interrupt_handler>
80002314:	58 0c       	cp.w	r12,0
80002316:	f8 0f 17 10 	movne	pc,r12
8000231a:	d6 03       	rete

8000231c <_int2>:
8000231c:	30 2c       	mov	r12,2
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
8000231e:	ce 9e       	rcall	800020f0 <_get_interrupt_handler>
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
80002320:	58 0c       	cp.w	r12,0
80002322:	f8 0f 17 10 	movne	pc,r12
80002326:	d6 03       	rete

80002328 <_int3>:
80002328:	30 3c       	mov	r12,3
8000232a:	ce 3e       	rcall	800020f0 <_get_interrupt_handler>
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
8000232c:	58 0c       	cp.w	r12,0
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
8000232e:	f8 0f 17 10 	movne	pc,r12
80002332:	d6 03       	rete
80002334:	d7 03       	nop
80002336:	d7 03       	nop
80002338:	d7 03       	nop
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
8000233a:	d7 03       	nop
8000233c:	d7 03       	nop
8000233e:	d7 03       	nop
80002340:	d7 03       	nop
80002342:	d7 03       	nop
80002344:	d7 03       	nop
80002346:	d7 03       	nop
80002348:	d7 03       	nop
8000234a:	d7 03       	nop
8000234c:	d7 03       	nop
8000234e:	d7 03       	nop
80002350:	d7 03       	nop
80002352:	d7 03       	nop
80002354:	d7 03       	nop
80002356:	d7 03       	nop
80002358:	d7 03       	nop
8000235a:	d7 03       	nop
8000235c:	d7 03       	nop
8000235e:	d7 03       	nop
80002360:	d7 03       	nop
80002362:	d7 03       	nop
80002364:	d7 03       	nop
80002366:	d7 03       	nop
80002368:	d7 03       	nop
8000236a:	d7 03       	nop
8000236c:	d7 03       	nop
8000236e:	d7 03       	nop
80002370:	d7 03       	nop
80002372:	d7 03       	nop
80002374:	d7 03       	nop
80002376:	d7 03       	nop
80002378:	d7 03       	nop
8000237a:	d7 03       	nop
8000237c:	d7 03       	nop
8000237e:	d7 03       	nop
80002380:	d7 03       	nop
80002382:	d7 03       	nop
80002384:	d7 03       	nop
80002386:	d7 03       	nop
80002388:	d7 03       	nop
8000238a:	d7 03       	nop
8000238c:	d7 03       	nop
8000238e:	d7 03       	nop
80002390:	d7 03       	nop
80002392:	d7 03       	nop
80002394:	d7 03       	nop
80002396:	d7 03       	nop
80002398:	d7 03       	nop
8000239a:	d7 03       	nop
8000239c:	d7 03       	nop
8000239e:	d7 03       	nop
800023a0:	d7 03       	nop
800023a2:	d7 03       	nop
800023a4:	d7 03       	nop
800023a6:	d7 03       	nop
800023a8:	d7 03       	nop
800023aa:	d7 03       	nop
800023ac:	d7 03       	nop
800023ae:	d7 03       	nop
800023b0:	d7 03       	nop
800023b2:	d7 03       	nop
800023b4:	d7 03       	nop
800023b6:	d7 03       	nop
800023b8:	d7 03       	nop
800023ba:	d7 03       	nop
800023bc:	d7 03       	nop
800023be:	d7 03       	nop
800023c0:	d7 03       	nop
800023c2:	d7 03       	nop
800023c4:	d7 03       	nop
800023c6:	d7 03       	nop
800023c8:	d7 03       	nop
800023ca:	d7 03       	nop
800023cc:	d7 03       	nop
800023ce:	d7 03       	nop
800023d0:	d7 03       	nop
800023d2:	d7 03       	nop
800023d4:	d7 03       	nop
800023d6:	d7 03       	nop
800023d8:	d7 03       	nop
800023da:	d7 03       	nop
800023dc:	d7 03       	nop
800023de:	d7 03       	nop
800023e0:	d7 03       	nop
800023e2:	d7 03       	nop
800023e4:	d7 03       	nop
800023e6:	d7 03       	nop
800023e8:	d7 03       	nop
800023ea:	d7 03       	nop
800023ec:	d7 03       	nop
800023ee:	d7 03       	nop
800023f0:	d7 03       	nop
800023f2:	d7 03       	nop
800023f4:	d7 03       	nop
800023f6:	d7 03       	nop
800023f8:	d7 03       	nop
800023fa:	d7 03       	nop
800023fc:	d7 03       	nop
800023fe:	d7 03       	nop
